name: compile the program for the different systems

# version: 1.0.0

on:
  push:
    branches:
      - main
      - compile-program
    tags:
      - "v*.*.*"
  pull_request:
    branches: 
      - main
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  id-token: write

env:
  CMAKE_VERSION: 3.28.3
  GPP_VERSION: 13
  BUILD_DIR_LINUX: build_linux
  BUILD_DIR_WINDOWS: build_windows
  RELEASE_DIR_LINUX: release_linux
  RELEASE_DIR_WINDOWS: release_windows
  ASSETS_DIR: assets
  OUTPUT_DIRECTORY: result
  FINAL_OUTPUT: final_result

jobs:
  build_for_linux:
    name: Compile and deploy for linux
    runs-on: ubuntu-latest
    steps:
      - name: Access the repository
        uses: actions/checkout@v4

      - name: Install a specific version of cmake
        uses: ssrobins/install-cmake@v1
        with:
          version: ${{env.CMAKE_VERSION}}

      - name: Install g++ 13
        run: |
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
          sudo apt update
          sudo apt install -y g++-${{env.GPP_VERSION}}
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-${{env.GPP_VERSION}} 100
          sudo update-alternatives --config g++

      - name: Install X11 dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libx11-dev libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev
      
      - name: Install OpenGL dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgl1-mesa-dev libglu1-mesa-dev

      - name: Install UDev dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libudev-dev


      - name: Compile the program
        run: |
          mkdir -p ${{env.BUILD_DIR_LINUX}}
          mkdir -p ${{env.RELEASE_DIR_LINUX}}
          cmake -S . -B ${{env.BUILD_DIR_LINUX}}
          make -C ${{env.BUILD_DIR_LINUX}} -j$(nproc)

      - name: Display the content of the build and release directories
        run: |
          echo "Displaying content of ${{env.BUILD_DIR_LINUX}}"
          ls -la ${{env.BUILD_DIR_LINUX}}
          echo "Displaying content of ${{env.RELEASE_DIR_LINUX}}"
          ls -la ${{env.RELEASE_DIR_LINUX}}

      - name: Store the program in the artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux_program
          path: ${{env.BUILD_DIR_LINUX}}

      - name: Store the assets in the artifacts
        uses: actions/upload-artifact@v4
        with:
          name: assets
          path: ${{env.ASSETS_DIR}}

  build_for_windows:
    name: Compile and deploy for windows
    runs-on: windows-latest
    steps:
      - name: Access the repository
        uses: actions/checkout@v4

      - name: Install Latest CMake
        uses: ssrobins/install-cmake@v1
        with:
          version: ${{env.CMAKE_VERSION}}

      # - name: Install CMake 3.28.3
      #   run: |
      #     choco install cmake --version=${{env.CMAKE_VERSION}} --allow-downgrade

      - name: Install Visual Studio 2019
        run: |
          choco install visualstudio2019buildtools --package-parameters "--add Microsoft.VisualStudio.Workload.VCTools --add Microsoft.VisualStudio.Component.VC.14.29.CLI --add Microsoft.VisualStudio.Component.Windows10SDK.19041 --add Microsoft.VisualStudio.Component.VC.14.29.CLI"

      - name: Compile the program
        run: |
          mkdir -p ${{env.BUILD_DIR_WINDOWS}}
          cmake -S . -B ${{env.BUILD_DIR_WINDOWS}}
          cmake --build ${{env.BUILD_DIR_WINDOWS}} --config ${{env.RELEASE_DIR_WINDOWS}}

      - name: Display the content of the build and release directorties
        run: |
          echo "Displaying content of ${{env.BUILD_DIR_WINDOWS}}"
          ls -la ${{env.BUILD_DIR_WINDOWS}}
          echo "Displaying content of ${{env.RELEASE_DIR_WINDOWS}}"
          ls -la ${{env.RELEASE_DIR_WINDOWS}} 

      - name: Store the program in the artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows_program
          path: ${{env.RELEASE_DIR_LINUX}}

  upload_to_github:
    name: Upload the program to the release
    runs-on: ubuntu-latest
    needs: [build_for_linux, build_for_windows]
    steps:
      - name: Create the folders
        run: |
          mkdir -p "${{env.OUTPUT_DIRECTORY}}"
          mkdir -p "${{env.OUTPUT_DIRECTORY}}/linux"
          mkdir -p "${{env.OUTPUT_DIRECTORY}}/windows"
          mkdir -p "${{env.OUTPUT_DIRECTORY}}/assets"

      - name: Download the linux program
        uses: actions/download-artifact@v4
        with:
          name: linux_program
          path: "${{env.OUTPUT_DIRECTORY}}/linux"

      - name: Download the windows program
        uses: actions/download-artifact@v4
        with:
          name: windows_program
          path: "${{env.OUTPUT_DIRECTORY}}/windows"

      - name: Download the assets
        uses: actions/download-artifact@v4
        with:
          name: assets
          path: "${{env.OUTPUT_DIRECTORY}}/assets"

      - name: Get body message
        id: body-message
        run: |
          COMMIT_MESSAGE=$(git tag -l --format='%(contents)' $TAG_NAME)
          echo "Commit message content = $COMMIT_MESSAGE"
          if [[ -n "$COMMIT_MESSAGE" ]]; then
            COMMIT_MESSAGE=$(git log --format=%s -n 1)
          fi
          if [ "$COMMIT_MESSAGE" = "" ]
          then
            COMMIT_MESSAGE="There is no message\n$(cat ./README.md)"
          else
            COMMIT_MESSAGE="${COMMIT_MESSAGE}\n$(cat ./README.md)"
          fi
          COMMIT_MESSAGE="${COMMIT_MESSAGE}\n\`\`\`log\n$(git log --format=%s -n 50)\n\`\`\`"
          echo "Commit message final content = '$COMMIT_MESSAGE'"
          # COMMIT_MESSAGE_ESCAPED=$(echo "$COMMIT_MESSAGE" | awk '{printf "%s\\n", $0}')
          # echo "COMMIT_MESSAGE=$COMMIT_MESSAGE_ESCAPED" >> $GITHUB_ENV
          {
            echo "COMMIT_MESSAGE<<EOH"
            echo -e "$COMMIT_MESSAGE"
            echo EOH
          } >> "$GITHUB_OUTPUT"

      - name: compress the content
        id: update-generated
        run: |
          tar -tzvf "${{env.OUTPUT_DIRECTORY}}.tar.gz" "${{env.OUTPUT_DIRECTORY}}"
          tar -tzvf "${{env.OUTPUT_DIRECTORY}}_linux.tar.gz" "${{env.OUTPUT_DIRECTORY}}/linux" "${{env.OUTPUT_DIRECTORY}}/assets"
          tar -tzvf "${{env.OUTPUT_DIRECTORY}}_windows.tar.gz" "${{env.OUTPUT_DIRECTORY}}/windows" "${{env.OUTPUT_DIRECTORY}}/assets"
          tar -tzvf "${{env.OUTPUT_DIRECTORY}}_assets.tar.gz" "${{env.OUTPUT_DIRECTORY}}/assets"
          
          mkdir -p "${{env.FINAL_OUTPUT}}"

          mv "${{env.OUTPUT_DIRECTORY}}.tar.gz" "${{env.FINAL_OUTPUT}}"
          mv "${{env.OUTPUT_DIRECTORY}}_linux.tar.gz" "${{env.FINAL_OUTPUT}}"
          mv "${{env.OUTPUT_DIRECTORY}}_windows.tar.gz" "${{env.FINAL_OUTPUT}}"
          mv "${{env.OUTPUT_DIRECTORY}}_assets.tar.gz" "${{env.FINAL_OUTPUT}}"
          mv "${{env.OUTPUT_DIRECTORY}}" "${{env.FINAL_OUTPUT}}"
      
      - name: Publish binary as GitHub release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: ${{env.FINAL_OUTPUT}}/*
          name: ${{ github.ref }}
          body: ${{ steps.body-message.outputs.COMMIT_MESSAGE }}
          draft: false
          prerelease: false
          make_latest: true
          token: ${{ secrets.GITHUB_TOKEN }}

  clean_created_cache:
    name: Clear the cache generated during the build time
    permissions: write-all
    runs-on: ubuntu-latest
    needs: [upload_to_github ]
    steps:

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Delete Created cache
        env:
          GH_TOKEN: ${{ secrets.CACHE_TOKEN }}
        run: |
          gh cache list
          gh cache delete --all
