name: compile the program for the different systems

# version: 1.0.0

on:
  push:
    branches:
      - main
      - compile-program
    tags:
      - "v*.*.*"
  pull_request:
    branches: 
      - main
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  id-token: write

jobs:
  build_for_linux:
    name: Compile and deploy for linux
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install CMake 3.28.3
        run: |
          apt update
          apt install -y wget
          wget https://github.com/Kitware/CMake/releases/download/v3.28.3/cmake-3.28.3.tar.gz
          tar -xzvf cmake-3.28.3.tar.gz
          cd cmake-3.28.3
          ./bootstrap
          make
          make install

      - name: Install g++ 13.3.0
        run: |
          add-apt-repository ppa:ubuntu-toolchain-r/test -y
          apt update
          apt install -y g++-13
          update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-13 100
          update-alternatives --config g++
      
      - name: Compile the program
        run: |
          mkdir build
          cmake . build
          make

      - name: Store the program in the artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux_program
          path: build

      - name: Store the assets in the artifacts
        uses: actions/upload-artifact@v4
        with:
          name: assets
          path: assets

  build_for_windows:
    name: Compile and deploy for windows
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install CMake 3.28.3
        run: |
          choco install cmake --version=3.28.3

      - name: Install Visual Studio 2019
        run: |
          choco install visualstudio2019buildtools --package-parameters "--add Microsoft.VisualStudio.Workload.VCTools --add Microsoft.VisualStudio.Component.VC.14.29.CLI --add Microsoft.VisualStudio.Component.Windows10SDK.19041 --add Microsoft.VisualStudio.Component.VC.14.29.CLI"

      - name: Compile the program
        run: |
          mkdir build
          cmake . build
          cmake --build build --config Release

      - name: Store the program in the artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows_program
          path: build

  upload_to_github:
    name: Upload the program to the release
    runs-on: ubuntu-latest
    needs: [build_for_linux, build_for_windows]
    steps:
      - name: Create the folders
        run: |
          mkdir -p result
          mkdir -p result/linux
          mkdir -p result/windows
          mkdir -p result/assets
      - name: Download the linux program
        uses: actions/download-artifact@v4
        with:
          name: linux_program
          path: result/linux

      - name: Download the windows program
        uses: actions/download-artifact@v4
        with:
          name: windows_program
          path: result/windows

      - name: Download the assets
        uses: actions/download-artifact@v4
        with:
          name: assets
          path: result/assets

      - name: Get body message
        id: body-message
        run: |
          COMMIT_MESSAGE=$(git tag -l --format='%(contents)' $TAG_NAME)
          echo "Commit message content = $COMMIT_MESSAGE"
          if [[ -n "$COMMIT_MESSAGE" ]]; then
            COMMIT_MESSAGE=$(git log --format=%s -n 1)
          fi
          if [ "$COMMIT_MESSAGE" = "" ]
          then
            COMMIT_MESSAGE="There is no message\n$(cat ./README.md)"
          else
            COMMIT_MESSAGE="${COMMIT_MESSAGE}\n$(cat ./README.md)"
          fi
          COMMIT_MESSAGE="${COMMIT_MESSAGE}\n\`\`\`log\n$(git log --format=%s -n 50)\n\`\`\`"
          echo "Commit message final content = '$COMMIT_MESSAGE'"
          # COMMIT_MESSAGE_ESCAPED=$(echo "$COMMIT_MESSAGE" | awk '{printf "%s\\n", $0}')
          # echo "COMMIT_MESSAGE=$COMMIT_MESSAGE_ESCAPED" >> $GITHUB_ENV
          {
            echo "COMMIT_MESSAGE<<EOH"
            echo -e "$COMMIT_MESSAGE"
            echo EOH
          } >> "$GITHUB_OUTPUT"

      - name: compress the content
        id: update-generated
        run: |
          tar -czvf result.tar.gz result
          tar -tzvf result_linux.tar.gz result/linux result/assets
          tar -tzvf result_windows.tar.gz result/windows result/assets
          tar -tzvf result_assets.tar.gz result/assets
          mkdir -p final_result

          mv result.tar.gz final_result
          mv result_linux.tar.gz final_result
          mv result_windows.tar.gz final_result
          mv result_assets.tar.gz final_result
          mv result final_result
      
      - name: Publish binary as GitHub release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: final_result/*
          name: ${{ github.ref }}
          body: ${{ steps.body-message.outputs.COMMIT_MESSAGE }}
          draft: false
          prerelease: false
          make_latest: true
          token: ${{ secrets.GITHUB_TOKEN }}

  clean_created_cache:
    name: Clear the cache generated during the build time
    permissions: write-all
    runs-on: ubuntu-latest
    needs: [upload_to_github ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Delete Created cache
        env:
          GH_TOKEN: ${{ secrets.CACHE_TOKEN }}
        run: |
          gh cache list
          gh cache delete --all
