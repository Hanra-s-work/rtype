@startuml Updated GUI Module Design

title "The design of the GUI window"

namespace GUI {
    namespace sf {
        class Text {}
        class Font {}
        class Music {}
        class Clock {}
        class Color {}
        class Image {}
        class Shape {}
        class Event {}
        class Sprite {}
    }

    namespace Enums {
        enum ShapeType {
            +Circle
            +Rectangle
            +Triangle
            +Polygon
        }

        enum ItemType {
            +ItemEND
            +ItemNONE
            +ItemText
            +ItemMusic
            +ItemAsset
            +ItemSprite
        }

        enum ColourValues {
            +CRed
            +CGreen
            +CBlue
            +CAlpha
        }
    }
    namespace Interfaces {
        interface IComponent {
            +virtual ~IComponent() = default
            +virtual void render(sf::Window& window) = 0
        }
    }

    namespace Utilities {
        class Clock {
            +Clock()
            +start()
            +stop()
            +restart()
            +getElapsedTime(): sf::Time
            +isRunning(): bool
            -sf::Clock _sfml_clock
        }
        class Colour {
            +Colour(UInt8 r, UInt8 g, UInt8 b, UInt8 a)
            +Colour(sf::Color colour)
            +getColour(): std::map<Enums::ColourValues, UInt8>
            - sf::Color _user_colour
        }
        class Dimensions {
            +Dimensions()
            +setPosition(int x, int y)
            +setDimensions(int width, int height)
            +getPosition(): sf::Vector2i
            +getDimensions(): sf::Vector2i
            +updatePosition(int x, int y)
            +updateDimensions(int width, int height)
            - sf::FloatRect dimensions
        }
        class CollisionCheck {
            +CollisionCheck()
            +isColliding(Utilities::Dimensions Dimensions1, Utilities::Dimensions Dimensions2): bool
            +isHovering(Utilities::Dimensions Dimensions, sf::Vector2f mouse_pos): bool
            +isClicked(Utilities::Dimensions Dimensions, sf::Vector2f mouse_pos): bool
        }
    }

    namespace Factory {
        class TextFactory {
            +createText(std::string text, std::string font_file): Text
        }
        class ImageFactory {
            +createImage(std::string file_path): Image
        }
        class MusicFactory {
            +createMusic(std::string file_path, bool loop): Music
        }
        class ShapeFactory {
            +createShape(Enums::ShapeType shape_type, Utilities::Colour &colour): Shape
        }
    }


    namespace BaseComponents {

        class Animation {
            +Animation(std::map<unsigned int, sf::Texture> &frames)
            +setFrameDuration(unsigned int microseconds)
            +createAnimation(std::string animation_name, std::vector<unsigned int> frames)
            +getAnimation(std::string animation_name): std::vector<unsigned int>
            +updateAnimation(std::string animation_name, std::vector<unsigned int> frames)
            +playAnimation(std::string animation_name)
            +stopAnimation()
            +isPlaying(): bool
            +getAnimationName():std::string
            +getFrameDuration():unsigned int
            +tick()
            -bool _loop
            -unsigned int _frame_duration
            -unsigned int _animation_frame
            -std::string _current_animation
            -std::map<unsigned int, sf::Texture> _sfml_textures
            -std::map<std::string, std::vector<unsigned int>> _sfml_animations
        }

        class Text {
            +Text(std::string text, std::string font_file)
            +setPosition(double x, double y)
            +setText(std::string text)
            +setFontSize(int size)
            +setTextColour(Utilities::Colour colour)
            +setFontFamily(std::string font_file)
            +getText(): std::string
            -sf::Text _sfml_text
            -sf::Font _sfml_font
        }

        class Music {
            +Music(std::string file_path, bool loop)
            +play()
            +pause()
            +stop()
            +setVolume(float volume)
            -sf::Music _sfml_music
        }

        class Image {
            +Image(std::string file_path)
            +setPosition(double x, double y)
            +setScale(double scale)
            +setRotation(double rotation)
            +setVisibility(bool visible)
            +setFillColour(Utilities::Colour colour)
            +removeFillColour()
            +getSize(): sf::Vector2f
            +getPosition(): sf::Vector2f
            -sf::Sprite _sfml_sprite
            -sf::Texture _sfml_texture
        }

        class Sprite {
            +Sprite()
            +playAnimation(std::string animation_name)
            +setFrame(unsigned int frame_index)
            -std::map<std::string, std::vector<unsigned int>> _animations
            -std::string _current_animation
        }

        class Shape {
            +Shape()
            +setShapeType(Enums::ShapeType type)
            +setPosition(double x, double y)
            +setSize(double width, double height)
            +setFillColour(Utilities::Colour colour)
            +setOutlineColour(Utilities::Colour colour)
            +setOutlineThickness(double thickness)
            -sf::Shape _sfml_shape
        }
    }

    namespace UIComponents {
        class Button {
            +Button()
            +setSize(double width, double height)
            +setPosition(double x, double y)
            +setText(std::string label)
            +setOnClickCallback(void (*callback)())
            +setHoverEffect(bool enable)
            +isHovered(): bool
            -std::string _label
            -std::function<void()> _onClick
            -bool _hoverEffect
            -Shape _shape
        }

    }

    namespace Input {
        class EventHandler {
            +EventHandler()
            +update()
            +isKeyPressed(sf::Keyboard::Key key): bool
            +getMousePosition(): sf::Vector2i
            +isMousePressed(sf::Mouse::Button button): bool
            +getKeys(): std::vector<sf::Event>
            -sf::Event _sfml_event
        }
    }

    class ItemCreator {
        +ItemCreator()
        +createItem(ItemType item, &args)
        - std::vector<std::map<std::string, Enums::ItemType, IComponent>> _items
    }

    class Main {
        +Main()
        -mainLoop()
        -Initialise()
        -initialiseConnection()
        -create_item()
        Input::EventHandler _events
    }

    ' Base sfml classes
    sf.Event --|> Input.EventHandler
    sf.Clock --|> Utilities.Clock
    sf.Color --|> Utilities.Colour
    sf.Text --|> BaseComponents.Text
    sf.Font --|> BaseComponents.Text
    sf.Music --|> BaseComponents.Music
    sf.Image --|> BaseComponents.Image
    sf.Shape --|> BaseComponents.Shape
    sf.Sprite --|> BaseComponents.Sprite

    ' Enums
    Enums.ItemType --|> ItemCreator
    Enums.ShapeType --|> Factory.ShapeFactory
    Enums.ShapeType --|> BaseComponents.Shape
    Enums.ColourValues --|> Utilities.Colour

    ' The colour links
    Utilities.Colour --|> Factory.ShapeFactory
    Utilities.Colour --|> BaseComponents.Text
    Utilities.Colour --|> BaseComponents.Image
    Utilities.Colour --|> BaseComponents.Shape

    ' Generic component for polymorphism
    Interfaces.IComponent --> Utilities.Clock
    Interfaces.IComponent --> Factory.TextFactory
    Interfaces.IComponent --> Factory.ImageFactory
    Interfaces.IComponent --> Factory.ShapeFactory
    Interfaces.IComponent --> Factory.MusicFactory

    ' Factory components
    Factory.TextFactory --> BaseComponents.Text
    Factory.ImageFactory --> BaseComponents.Image
    Factory.ShapeFactory --> BaseComponents.Shape
    Factory.MusicFactory --> BaseComponents.Music

    ' Item position tracking
    Utilities.Dimensions --> BaseComponents.Text
    Utilities.Dimensions --> BaseComponents.Image
    Utilities.Dimensions --> BaseComponents.Shape
    Utilities.Dimensions --|> Utilities.CollisionCheck

    ' Collision check class linking
    Utilities.CollisionCheck --> BaseComponents.Text
    Utilities.CollisionCheck --> BaseComponents.Image
    Utilities.CollisionCheck --> BaseComponents.Shape

    ' Base components
    BaseComponents.Image --> BaseComponents.Sprite
    BaseComponents.Animation --|> BaseComponents.Sprite
    Utilities.Clock --> BaseComponents.Animation

    ' UI ready components
    BaseComponents.Shape --> UIComponents.Button

    ' All the Components are linked to the ItemCreator
    BaseComponents.Text --|> ItemCreator
    Utilities.CollisionCheck --|> ItemCreator
    BaseComponents.Animation --|> ItemCreator
    BaseComponents.Music --|> ItemCreator
    BaseComponents.Image --|> ItemCreator
    BaseComponents.Sprite --|> ItemCreator
    BaseComponents.Shape --|> ItemCreator
    UIComponents.Button --|> ItemCreator

    ' The root linker
    Input.EventHandler --|> Main: uses
    ItemCreator --> Main
}

@enduml
