@startuml GUI module desing

namespace GUI {
    namespace Factory {
        class Text {
            +Text(std::string text, std::string font_file)
            +setPosition(double x, double y)
            +setText(std::string text)
            +setFontSize(int size)
            +setForegroundColour(sf::Color colour)
            +setBackgroundColour(sf::Color colour)
            +setFontFamily(std::string font_file)
            -sf::Text _the_text
            -sf::Font _the_font
        }
        class Music {
            +Music()
            +setMusic(std:string file_path, std:bool loop)
            +playMusic()
            +stopMusic()
            +pauseMusic()
            +resumeMusic()
            +setVolume()
            -sf::Music _audio_file
        }
        class Image {
            +Image()
            +setImage(std::string file_path)
            +setPosition(double x, double y)
            +setScale(double scale)
            +setRotation(double rotation)
            +setForegroundColour(sf::Color colour)
            +setBackgroundColour(sf::Color colour)
            +setVisible(std::bool show_sprite)
            +setFillColour(sf::Color colour)
            +removeFillColour()
            -sf::Sprite _the_sprite
            -sf::Texture _the_texture
        }
        class Sprite {
            +Sprite()
            +stepAnimation()
            +stopAnimation()
            +resetAnimation()
            +setFrame(unsigned int index)
            +setAnimation(std::string animation_name)
            +playAnimation(std::string animation_name)
            +tick(): The function that will run any actions scheduled in the sprite.
            +setSpriteSize(sf::Vector2i dim, std::bool move_left, std::bool start_bottom)
            +createAnimation(std::string animation_name, std::vector<unsigned int> frames)
            -std::map<unsigned int, sf::Texture> frames
            -std::map<std::string, std::vector<unsigned int>> animations
            -std::string _current_animation
        }
        class Event {
            +Event()
            +updateEvents()
            +getKey()
            +getMouseClick()
            +getMousePosition()
            +getMouseRelease()
            -sf::Event _event
        }
        class Clock {
            +Clock()
            +stopClock()
            +startClock()
            +restartClock()
            +getElapsedTime()
            +getElapsedSeconds()
            -sf::Clock _clock
        }
        class Shape {
            +Shape()
            +setShapeType(std::enum shape_type)
            +setShapePosition(unsigned double x, unsigned double y)
            +setShapeSize(unsigned double width, unsigned double height)
            +setShapeForeground(sf::Color colour)
            +setShapeBackground(sf::Color colour)
            +setShapeFillColour(sf::Color colour)
            +setShapeOutlineColour(sf::Color colour)
            +setShapeOutlineThickness(unsigned int thickness)
            +setShapeOutlineStyle(std::enum outline_style)
            +removeShapeFillColour()
            +removeShapeOutlineColour()
            -sf::Texture _shape;
        }
        Image --> Sprite
    }
    namespace Components {
        class Button {
            +Button(std::string text, std::string font, std::string font_size
        }
    }
    class Main {
        +Main()
        +~Main()
    }
}

@enduml
