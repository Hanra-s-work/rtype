@startuml Updated GUI Module Design

namespace GUI {
    namespace Factory {
        class TextFactory {
            +createText(std::string text, std::string font_file): Text
        }
        class ImageFactory {
            +createImage(std::string file_path): Image
        }
        class MusicFactory {
            +createMusic(std::string file_path, bool loop): Music
        }
        class ShapeFactory {
            +createShape(std::string shape_type, std::string color): Shape
        }
    }

    namespace Components {
        class Text {
            +Text(std::string text, std::string font_file)
            +setPosition(double x, double y)
            +setText(std::string text)
            +setFontSize(int size)
            +setTextColour(sf::Color colour)
            +setFontFamily(std::string font_file)
            +getText(): std::string
            -sf::Text _sfml_text
            -sf::Font _sfml_font
        }

        class Music {
            +Music(std::string file_path, bool loop)
            +play()
            +pause()
            +stop()
            +setVolume(float volume)
            -sf::Music _sfml_music
        }

        class Image {
            +Image(std::string file_path)
            +setPosition(double x, double y)
            +setScale(double scale)
            +setRotation(double rotation)
            +setVisibility(bool visible)
            +setFillColour(sf::Color colour)
            +removeFillColour()
            +getSize(): sf::Vector2f
            +getPosition(): sf::Vector2f
            -sf::Sprite _sfml_sprite
            -sf::Texture _sfml_texture
        }

        class Animation {
            +Animation(std::map<unsigned int, sf::Texture> &frames)
            +setFrameDuration(unsigned int microseconds)
            +createAnimation(std::string animation_name, std::vector<unsigned int> frames)
            +getAnimation(std::string animation_name): std::vector<unsigned int>
            +updateAnimation(std::string animation_name, std::vector<unsigned int> frames)
            +playAnimation(std::string animation_name)
            +stopAnimation()
            +isPlaying(): std::bool
            +getAnimationName():std::string
            +getFrameDuration():unsigned int
            +tick()
            -std::map<unsigned int, sf::Texture> _sfml_textures
            -std::map<std::string, std::vector<unsigned int>> _sfml_animations
            -std::string _current_animation
            -unsigned int _animation_frame
            -std::bool _loop
            -unsigned int _frame_duration
        }

        class Sprite {
            +Sprite()
            +playAnimation(std::string animation_name)
            +setFrame(unsigned int frame_index)
            -std::map<std::string, std::vector<unsigned int>> _animations
            -std::string _current_animation
        }

        class Shape {
            +Shape()
            +setShapeType(ShapeType type)
            +setPosition(double x, double y)
            +setSize(double width, double height)
            +setFillColour(sf::Color colour)
            +setOutlineColour(sf::Color colour)
            +setOutlineThickness(double thickness)
            -sf::Shape _sfml_shape
        }
    }

    namespace Input {
        class EventHandler {
            +EventHandler()
            +update()
            +isKeyPressed(sf::Keyboard::Key key): bool
            +getMousePosition(): sf::Vector2i
            +isMousePressed(sf::Mouse::Button button): bool
            -sf::Event _sfml_event
        }
    }

    namespace Utilities {
        class Clock {
            +Clock()
            +start()
            +stop()
            +restart()
            +getElapsedTime(): sf::Time
            +isRunning(): bool
            -sf::Clock _sfml_clock
        }
    }

    namespace Interfaces {
        interface Renderable {
            +render(sf::RenderWindow& window)
        }
    }
    
    ' Relationships
    Factory.TextFactory --> Components.Text
    Factory.ImageFactory --> Components.Image
    Factory.MusicFactory --> Components.Music
    Factory.ShapeFactory --> Components.Shape
    Components.Image --> Components.Sprite
    Components.Animation --> Components.Sprite
    Utilities.Clock --> Components.Animation

    Components.Text ..|> Interfaces.Renderable
    Components.Image ..|> Interfaces.Renderable
    Components.Sprite ..|> Interfaces.Renderable
    Components.Shape ..|> Interfaces.Renderable

    sf.Event--> Input.EventHandler 
    sf.Clock --> Utilities.Clock
}

@enduml
